name: Terraform CI

on:
  push:
    branches: [ main, feature/*, bugfix/*, release/* ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write
  security-events: write

jobs:
  terraform-checks:
    name: Terraform Format and Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.12.2"

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Setup Checkov
      run: |
        python -m pip install --upgrade pip
        pip install checkov

    - name: Run Checkov Security Scan
      run: |
        checkov --framework terraform \
                --directory . \
                --output cli \
                --output sarif \
                --output-file-path console,checkov-report.sarif \
                --skip-check CKV_AWS_79,CKV_AWS_144 \
                --quiet
      continue-on-error: false

    - name: Upload Checkov SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-report.sarif
        category: checkov

    # Uncomment in actual module
    # - name: Setup TFLint
    #   uses: terraform-linters/setup-tflint@v4
    #   with:
    #     tflint_version: v0.58.1

    # - name: Show TFLint version
    #   run: tflint --version

    # - name: Init TFLint
    #   run: tflint --init

    # - name: Run TFLint
    #   run: tflint -f compact
      
    # Root module validation skipped - requires provider configuration
    # Root module is designed to be used as a module with providers passed in

    - name: Terraform Init (Modules)
      run: |
        for module in modules/*/; do
          echo "Initializing $module"
          cd "$module"
          terraform init -backend=false
          cd - > /dev/null
        done
        
    - name: Terraform Validate (Modules)
      run: |
        for module in modules/*/; do
          echo "Validating $module"
          cd "$module"
          terraform validate
          cd - > /dev/null
        done
    - name: Terraform Init (Examples)
      run: |
        for example in examples/*/; do
          echo "Initializing $example"
          cd "$example"
          terraform init -backend=false
          cd - > /dev/null
        done
        
    - name: Terraform Validate (Examples)
      run: |
        for example in examples/*/; do
          echo "Validating $example"
          cd "$example"
          terraform validate
          cd - > /dev/null
        done

  terraform-tests:
    name: Terraform Tests
    runs-on: ubuntu-latest
    environment: development
    needs: terraform-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: terraform-ci-tests
        aws-region: us-east-1
        audience: sts.amazonaws.com
        retry-max-attempts: 3
        output-credentials: true
        

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.12.2"

    # Uncomment the following lines to run Terratest
    # - name: Run Terratest
    #   env:
    #     TF_VAR_name_prefix: "ci-test"
    #     TF_VAR_environment_type: "Development"
    #     TF_VAR_tags: '{"Environment":"ci","Project":"terraform-module","ManagedBy":"github-actions"}'
    #   run: |
    #     cd test
    #     go mod tidy
    #     go test -v -timeout 30m